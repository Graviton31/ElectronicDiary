<!-- Views/GroupSchedule/Index.cshtml -->
@using System.Globalization
@model ElectronicDiaryWeb.Models.CombinedScheduleViewModel

<style>
    .lesson-card {
        border-radius: 12px;
        background: #f8fafc;
        transition: transform 0.2s, box-shadow 0.2s;
    }

        .lesson-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
        }

    .btn-icon {
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .cancelled {
        position: relative;
        opacity: 0.7;
        background: repeating-linear-gradient(-45deg, transparent, transparent 5px, rgba(220,53,69,0.05) 5px, rgba(220,53,69,0.05) 10px);
    }

        .cancelled::before {
            content: "";
            position: absolute;
            top: 50%;
            left: 0;
            right: 0;
            height: 2px;
            background: #dc3545;
            transform: rotate(-5deg);
        }
</style>

<div class="container mt-4">
    <h2 class="mb-4 text-primary fw-bold">Управление расписанием групп</h2>

    <!-- Group selection and actions -->
    <div class="bg-light rounded-3 p-4 mb-4 shadow-sm">
        <div class="row align-items-center g-3">
            <!-- Group selector -->
            <div class="col-md-6">
                <form method="get" class="form-inline">
                    <input type="hidden" name="subjectId" value="@Model.SubjectId" />
                    <div class="input-group">
                        <span class="input-group-text bg-white border-end-0">
                            <i class="bi bi-people-fill text-muted"></i>
                        </span>
                        <select name="groupId" class="form-select ps-0" onchange="this.form.submit()">
                            @foreach (var group in Model.Groups)
                            {
                                <option value="@group.IdGroup" selected="@(group.IdGroup == Model.SelectedGroupId)">
                                    @group.Name
                                </option>
                            }
                        </select>
                    </div>
                </form>
            </div>

            @if (Model.SelectedGroupId.HasValue)
            {
                <div class="col-md-6">
                    <div class="d-flex gap-3 justify-content-md-end">
                        <button type="button"
                                class="btn btn-success px-4 py-2 rounded-pill"
                                data-bs-toggle="modal"
                                data-bs-target="#standardLessonModal"
                                onclick="loadStandardScheduleForm()">
                            <i class="bi bi-plus-circle me-2"></i>Добавить занятие
                        </button>
                        <button type="button"
                                class="btn btn-warning px-4 py-2 rounded-pill"
                                data-bs-toggle="modal"
                                data-bs-target="#scheduleChangeModal"
                                onclick="loadScheduleChangeForm()">
                            <i class="bi bi-pencil-square me-2"></i>Изменение в расписании
                        </button>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (Model.SelectedGroupId.HasValue)
    {
        <!-- Week navigation -->
        <div class="d-flex justify-content-center gap-2 mb-4">
            <a href="@Url.Action("Index", new { groupId = Model.SelectedGroupId, date = Model.PreviousWeekStart, subjectId = Model.SubjectId })"
               class="btn btn-outline-primary px-4 rounded-pill">← Предыдущая</a>
            <a href="@Url.Action("Index", new { groupId = Model.SelectedGroupId, date = DateTime.Today, subjectId = Model.SubjectId })"
               class="btn btn-outline-secondary px-4 rounded-pill">Сегодня</a>
            <a href="@Url.Action("Index", new { groupId = Model.SelectedGroupId, date = Model.NextWeekStart, subjectId = Model.SubjectId })"
               class="btn btn-outline-primary px-4 rounded-pill">Следующая →</a>
        </div>

        <!-- Schedule -->
        @if (Model.Schedule?.Days != null)
        {
            <div class="row g-4">
                @foreach (var day in Model.Schedule.Days)
                {
                    <div class="col-xl-4 col-lg-6">
                        <div class="card h-100 border-0 shadow-sm">
                            <div class="card-header bg-primary bg-opacity-10 border-0 py-3">
                                <h5 class="mb-0 d-flex justify-content-between align-items-center">
                                    <span class="text-primary fw-semibold">
                                        @day.Date.ToString("dddd", new CultureInfo("ru-RU"))
                                    </span>
                                    <span class="badge bg-primary rounded-pill">
                                        @day.Date.ToString("dd.MM.yy")
                                    </span>
                                </h5>
                            </div>
                            <div class="card-body pt-3 pb-0">
                                @if (!day.Lessons.Any())
                                {
                                    <div class="text-center text-muted py-4">
                                        <i class="bi bi-calendar-x fs-4"></i>
                                        <div class="mt-2">Нет занятий</div>
                                    </div>
                                }
                                else
                                {
                                    @foreach (var lesson in day.Lessons.OrderBy(l => l.StartTime))
                                    {
                                        <div class="lesson-card mb-3 p-3 @(lesson.IsCancelled ? "cancelled" : "")">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1 me-3">
                                                    <div class="d-flex align-items-center gap-2 mb-2">
                                                        <span class="badge bg-light text-dark border">
                                                            @lesson.StartTime.ToString("HH\\:mm")-@lesson.EndTime.ToString("HH\\:mm")
                                                        </span>
                                                        @if (lesson.IsCancelled)
                                                        {
                                                            <span class="badge bg-danger">
                                                                <i class="bi bi-x-circle me-1"></i>Отменено
                                                            </span>
                                                        }
                                                        @if (lesson.IsAdditional)
                                                        {
                                                            <span class="badge bg-success">
                                                                <i class="bi bi-plus-circle me-1"></i>Дополнительное
                                                            </span>
                                                        }
                                                    </div>

                                                    <h6 class="mb-2 text-truncate">@lesson.SubjectName</h6>

                                                    <div class="text-muted small">
                                                        @if (!string.IsNullOrEmpty(lesson.Classroom))
                                                        {
                                                            <div class="d-flex align-items-center mb-1">
                                                                <i class="bi bi-door-open me-2"></i>
                                                                @lesson.Classroom
                                                            </div>
                                                        }
                                                        <div class="d-flex align-items-center">
                                                            <i class="bi bi-person me-2"></i>
                                                            <span class="text-truncate">@string.Join(", ", lesson.Teachers)</span>
                                                        </div>
                                                    </div>

                                                    @if (lesson.ChangeType == "перенос")
                                                    {
                                                        <div class="mt-2">
                                                            <div class="alert alert-warning py-1 mb-0">
                                                                <i class="bi bi-arrow-left-right me-2"></i>
                                                                Перенос с @lesson.OriginalDetails.Date.ToString("dd.MM")
                                                                @lesson.OriginalDetails.StartTime.ToString("HH\\:mm")
                                                            </div>
                                                        </div>
                                                    }
                                                </div>

                                                <div class="d-flex flex-column gap-2">
                                                    @if (lesson.StandardScheduleId.HasValue)
                                                    {
                                                        <a asp-action="EditStandard"
                                                           asp-route-id="@lesson.StandardScheduleId"
                                                           class="btn btn-icon btn-sm btn-outline-primary rounded-circle"
                                                           title="Редактировать"
                                                           data-bs-toggle="tooltip">
                                                            <i class="bi bi-pencil"></i>
                                                        </a>
                                                    }
                                                    @if (lesson.ScheduleChangeId.HasValue)
                                                    {
                                                        <a asp-action="EditChange"
                                                           asp-route-id="@lesson.ScheduleChangeId"
                                                           class="btn btn-icon btn-sm btn-outline-warning rounded-circle"
                                                           title="Редактировать изменение"
                                                           data-bs-toggle="tooltip">
                                                            <i class="bi bi-clock-history"></i>
                                                        </a>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <div class="alert alert-info d-flex align-items-center gap-2">
            <i class="bi bi-info-circle fs-5"></i>
            Выберите группу из списка для просмотра расписания
        </div>
    }
</div>

<!-- Modal Windows -->
<div class="modal fade" id="standardLessonModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Новое стандартное занятие</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="standardLessonModalContent">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="scheduleChangeModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">Изменение расписания</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="scheduleChangeModalContent">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

<script>
    // Load standard schedule form
    function loadStandardScheduleForm() {
        const groupId = @Model.SelectedGroupId;
        fetch(`/GroupSchedule/CreateStandardForm?groupId=${groupId}`)
            .then(response => {
                if (!response.ok) throw new Error('Ошибка загрузки формы');
                return response.text();
            })
            .then(html => {
                document.getElementById('standardLessonModalContent').innerHTML = html;
            })
            .catch(error => {
                console.error(error);
                document.getElementById('standardLessonModalContent').innerHTML = "Ошибка загрузки формы";
            });
    }

    // Load schedule change form
    function loadScheduleChangeForm() {
        const groupId = @Model.SelectedGroupId;
        fetch(`/GroupSchedule/CreateChangeForm?groupId=${groupId}`)
            .then(response => {
                if (!response.ok) throw new Error('Ошибка загрузки формы');
                return response.text();
            })
            .then(html => {
                document.getElementById('scheduleChangeModalContent').innerHTML = html;
            })
            .catch(error => {
                console.error(error);
                document.getElementById('scheduleChangeModalContent').innerHTML = "Ошибка загрузки формы";
            });
    }

    // Submit handlers
    async function submitStandardForm(event) {
        event.preventDefault();
        const formData = new FormData(event.target);

        try {
            const response = await fetch(event.target.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                $('#standardLessonModal').modal('hide');
                window.location.reload();
            } else {
                const errorText = await response.text();
                document.getElementById('standardLessonModalContent').innerHTML = errorText;
            }
        } catch (error) {
            console.error('Ошибка:', error);
        }
    }

    async function submitChangeForm(event) {
        event.preventDefault();
        const formData = new FormData(event.target);

        try {
            const response = await fetch(event.target.action, {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                $('#scheduleChangeModal').modal('hide');
                window.location.reload();
            } else {
                const errorText = await response.text();
                document.getElementById('scheduleChangeModalContent').innerHTML = errorText;
            }
        } catch (error) {
            console.error('Ошибка:', error);
        }
    }

    // Load schedule change form
        function loadScheduleChangeForm() {
        console.log('[DEBUG] Loading schedule change form...');
        const groupId = @Model.SelectedGroupId;
        fetch(`/GroupSchedule/CreateChangeForm?groupId=${groupId}`)
            .then(response => {
                if (!response.ok) throw new Error('Ошибка загрузки формы');
                return response.text();
            })
            .then(html => {
                const container = document.getElementById('scheduleChangeModalContent');
                container.innerHTML = html;

                // Принудительно выполняем скрипты
                const scripts = container.querySelectorAll('script');
                scripts.forEach(oldScript => {
                    const newScript = document.createElement('script');
                    newScript.text = oldScript.text;
                    document.body.appendChild(newScript).parentNode.removeChild(newScript);
                });
            })
            .catch(error => {
                console.error('Ошибка:', error);
                container.innerHTML = "Ошибка загрузки формы";
            });
    }
</script>