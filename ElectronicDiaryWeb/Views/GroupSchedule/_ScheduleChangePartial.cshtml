@using ElectronicDiaryWeb.Models.Shedule
@model EditScheduleChangeViewModel

<form asp-action="CreateChange" method="post" onsubmit="submitChangeForm(event)" id="changeForm">
    <input type="hidden" asp-for="GroupId" />

    <div class="mb-3">
        <label class="form-label">Тип изменения</label>
        <select asp-for="ChangeType" class="form-select change-type-selector" required>
            <option value="">Выберите тип</option>
            <option value="перенос">Перенос занятия</option>
            <option value="отмена">Отмена занятия</option>
            <option value="дополнительное">Дополнительное занятие</option>
        </select>
        <span asp-validation-for="ChangeType" class="text-danger"></span>
    </div>

    <div id="changeDetails" style="display: none;">
        <!-- Объединенный блок для исходного занятия -->
        <div class="row mb-3 original-lesson-section">
            <div class="col-md-12">
                <div class="border p-3 rounded-3 mb-4 bg-light">
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-calendar2-event fs-5 text-primary me-2"></i>
                        <h6 class="mb-0 fw-semibold">Исходное занятие</h6>
                    </div>

                    <!-- Дата занятия -->
                    <div class="mb-3">
                        <label class="form-label">Дата занятия <span class="text-danger">*</span></label>
                        <input asp-for="OldDate" type="date" class="form-control original-date-input"
                               required="@(Model.ChangeType == "перенос" || Model.ChangeType == "отмена")">
                        <small class="form-text text-muted mt-1">
                            <i class="bi bi-info-circle"></i> Выберите дату из стандартного расписания группы
                        </small>
                        <span asp-validation-for="OldDate" class="text-danger"></span>
                    </div>

                    <!-- Время занятия -->
                    <div class="mb-3">
                        <label class="form-label">Время занятия <span class="text-danger">*</span></label>
                        <select asp-for="StandardScheduleId" class="form-select standard-schedule-select"
                                required="@(Model.ChangeType == "перенос" || Model.ChangeType == "отмена")">
                            <option value="">Выберите время...</option>
                        </select>
                        <div class="schedule-error text-danger mt-1 small"></div>
                        <span asp-validation-for="StandardScheduleId" class="text-danger"></span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Новый объединенный блок для нового занятия -->
        <div class="row mb-3 new-lesson-section">
            <div class="col-md-12">
                <div class="border p-3 rounded-3 mb-4 bg-light">
                    <div class="d-flex align-items-center mb-3">
                        <i class="bi bi-calendar2-plus fs-5 text-success me-2"></i>
                        <h6 class="mb-0 fw-semibold">Новое занятие</h6>
                    </div>

                    <!-- Новая дата -->
                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label class="form-label">Новая дата <span class="text-danger">*</span></label>
                            <div class="input-group">
                                <input asp-for="NewDate" type="date" class="form-control" required>
                            </div>
                            <small class="form-text text-muted mt-1 d-block">
                                <i class="bi bi-calendar-check"></i> Обязательно выберите дату нового занятия
                            </small>
                        </div>
                    </div>

                    <!-- Время и кабинет -->
                    <div class="time-classroom-section">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">Время начала <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input asp-for="NewStartTime" type="time" class="form-control" required>
                                </div>
                                <small class="text-danger small time-validation-msg"></small>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Время окончания <span class="text-danger">*</span></label>
                                <div class="input-group">
                                    <input asp-for="NewEndTime" type="time" class="form-control" required>
                                </div>
                                <small class="text-danger small time-validation-msg"></small>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Кабинет</label>
                            <input asp-for="NewClassroom" class="form-control">
                            <small class="form-text text-muted mt-1 d-block">
                                <i class="bi bi-info-circle"></i> Можно не указывать, если не изменился
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
        <button type="submit" class="btn btn-warning">Сохранить изменения</button>
    </div>
</form>

<script>
    (function() {
        console.log('[DEBUG] Schedule change form script started');
        const form = document.getElementById('changeForm');
        const apiBaseUrl = window.apiBaseUrl;

        if (!form) {
            console.error('[DEBUG] Form element not found!');
            return;
        }

        // Элементы формы
        const changeTypeSelector = form.querySelector('.change-type-selector');
        const originalDateInput = form.querySelector('.original-date-input');
        const standardScheduleSelect = form.querySelector('.standard-schedule-select');
        const errorContainer = form.querySelector('.schedule-error');
        const sections = {
            originalLesson: form.querySelector('.original-lesson-section'),
            newLesson: form.querySelector('.new-lesson-section')
        };

        // Функция получения дня недели
        function getDayName(weekDay) {
            const days = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс']; // Новый порядок дней
            return days[(weekDay + 6) % 7] || '???'; // Корректировка индекса
        }

        // Функция управления видимостью секций (исправленная)
        function handleChangeType(selectedType) {
            const originalDateInput = form.querySelector('#OldDate');
            const standardScheduleSelect = form.querySelector('#StandardScheduleId');
            const newDateInput = form.querySelector('#NewDate');
            const timeInputs = form.querySelectorAll('.time-classroom-section input');

            // Управление required атрибутами
            originalDateInput.required = selectedType === 'перенос' || selectedType === 'отмена';
            standardScheduleSelect.required = selectedType === 'перенос' || selectedType === 'отмена';
            newDateInput.required = selectedType === 'перенос' || selectedType === 'дополнительное';

            timeInputs.forEach(input => {
                input.required = selectedType === 'перенос' || selectedType === 'дополнительное';
            });

            // Управление видимостью секций
            form.querySelector('#changeDetails').style.display = 'block';
            form.querySelector('.original-lesson-section').style.display =
                (selectedType === 'перенос' || selectedType === 'отмена') ? 'block' : 'none';
            form.querySelector('.new-lesson-section').style.display =
                (selectedType === 'перенос' || selectedType === 'дополнительное') ? 'block' : 'none';

            // Сброс валидации при изменении типа
            form.querySelectorAll('input, select').forEach(el => {
                el.setCustomValidity('');
            });
        }

        async function loadStandardSchedules(date) {
            const groupId = document.querySelector('#GroupId').value;
            try {
                const response = await fetch(
                    `${apiBaseUrl}/api/StandardSchedules/GetStandardSchedules?groupId=${groupId}&date=${date}`
                );

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return await response.json();
            } catch (error) {
                console.error('Ошибка загрузки расписаний:', error);
                throw error; // Пробрасываем ошибку дальше
            }
        }

        // Обработчик загрузки расписаний
        async function handleDateChange(date) {
            console.log('[DEBUG] Handling date change:', date);
            standardScheduleSelect.disabled = true;
            errorContainer.textContent = '';

            try {
                const schedules = await loadStandardSchedules(date);
                standardScheduleSelect.innerHTML = '<option value="">Выберите время</option>';

                if (!schedules || schedules.length === 0) {
                    const option = document.createElement('option');
                    option.textContent = '❌ Нет занятий на выбранную дату';
                    option.disabled = true;
                    standardScheduleSelect.appendChild(option);
                } else {
                    schedules.forEach(s => {
                        const option = document.createElement('option');
                        option.value = s.id;
                        const start = s.startTime.slice(0, 5);
                        const end = s.endTime.slice(0, 5);
                        const dateObj = new Date(date);
                        const weekDayNumber = dateObj.getDay(); // 0-6 (воскресенье-суббота)

                        // Исправленное получение дня недели
                        option.textContent = `${getDayName(weekDayNumber)} ${start}-${end} (${s.classroom})`;
                        standardScheduleSelect.appendChild(option);
                    });
                }
            } catch (error) {
                errorContainer.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Ошибка загрузки. Проверьте интернет и попробуйте снова';
                standardScheduleSelect.innerHTML = '<option value="">⚠️ Ошибка загрузки</option>';
            } finally {
                standardScheduleSelect.disabled = false;
            }
        }

        // Инициализация обработчиков событий
        function initEventListeners() {
            changeTypeSelector.addEventListener('change', (e) => handleChangeType(e.target.value));
            originalDateInput.addEventListener('change', (e) => handleDateChange(e.target.value));

            // Инициализация при первой загрузке
            handleChangeType(changeTypeSelector.value);
            if (originalDateInput.value) handleDateChange(originalDateInput.value);
        }

        initEventListeners();

        // Валидация времени
        const startTimeInput = form.querySelector('#NewStartTime');
        const endTimeInput = form.querySelector('#NewEndTime');

        startTimeInput.addEventListener('change', function() {
            if (this.value && endTimeInput.value && this.value >= endTimeInput.value) {
                endTimeInput.setCustomValidity('Invalid time');
                endTimeInput.nextElementSibling.textContent = '❌ Время окончания должно быть позже начала';
            } else {
                endTimeInput.setCustomValidity('');
                endTimeInput.nextElementSibling.textContent = '';
            }
        });

    })();
</script>