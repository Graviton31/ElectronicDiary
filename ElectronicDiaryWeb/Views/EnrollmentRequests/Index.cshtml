@using ElectronicDiaryApi.ModelsDto.Group
@model List<GroupShortInfoDto>
@{
    ViewData["Title"] = "Заявки на запись";
}

<style>
    .request-card {
        border: none;
        border-radius: 0.75rem;
        transition: transform 0.2s, box-shadow 0.2s;
        background: linear-gradient(to right, #f8f9fa 0%, #ffffff 100%);
        height: 45px;
        margin-bottom: 1rem;
    }

        .request-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.1);
        }

        .request-card .card-body {
            padding: 0.5rem 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 1rem;
        }

        .request-card .badge {
            font-size: 0.85em;
            padding: 0.35em 0.65em;
            margin-left: auto;
        }

    .progress {
        height: 8px;
        border-radius: 4px;
    }

    .bi {
        font-size: 1.2em;
        vertical-align: middle;
    }

    /* Стили для списка групп */
    .group-item .progress-bar {
        background-color: #28a745;
    }

    .group-item .badge {
        font-size: 0.9em;
    }
</style>

<div class="container-fluid">
    <div class="row">
        <!-- Левая колонка - Список групп -->
        <div class="col-md-4 border-end pe-3">
            <h3 class="mb-4 fw-bold">Группы предмета</h3>
            <div class="list-group" id="groupsList">
                @foreach (var group in Model)
                {
                    <a href="#" class="list-group-item list-group-item-action group-item shadow-sm mb-3 rounded-3"
                       data-groupid="@group.IdGroup"
                       data-maxstudents="@group.MaxStudentCount"
                       data-current="@group.CurrentStudents">
                        <div class="d-flex w-100 justify-content-between align-items-center">
                            <div class="me-3">
                                <h5 class="mb-1 fw-semibold">@group.Name</h5>
                                <div class="d-flex align-items-center mt-2">
                                    <i class="bi bi-people-fill me-2 text-muted"></i>
                                    <small class="text-muted">@group.CurrentStudents/@group.MaxStudentCount студентов</small>
                                </div>
                            </div>
                            <span class="badge bg-primary rounded-pill">@group.RequestCount</span>
                        </div>
                        <div class="mt-2">
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar bg-success" role="progressbar"
                                     style="width: @((group.CurrentStudents * 100)/group.MaxStudentCount)%"
                                     aria-valuenow="@group.CurrentStudents"
                                     aria-valuemax="@group.MaxStudentCount">
                                </div>
                            </div>
                            <small class="text-muted d-block mt-1">Заполнено @((group.CurrentStudents * 100) / group.MaxStudentCount)%</small>
                        </div>
                    </a>
                }
            </div>
        </div>

        <!-- Правая колонка - Заявки группы -->
        <div class="col-md-8 ps-4">
            <div id="requestsContainer" style="display: none;">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h3 class="fw-bold ">Заявки группы <span id="groupTitle" class="text-decoration-underline"></span></h3>
                    <div class="alert alert-warning mb-0 py-2" id="capacityWarning" style="display: none;">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>Группа заполнена!
                    </div>
                </div>
                <div id="requestsCards" class="d-grid gap-3">
                    <!-- Карточки заявок будут здесь -->
                </div>
            </div>
            <div id="noRequests" class="text-center mt-5" style="display: none;">
                <div class="py-5">
                    <i class="bi bi-inbox-fill display-4 text-muted"></i>
                    <h3 class="mt-3 text-muted">Нет активных заявок</h3>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования -->
<div class="modal fade" id="requestModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title">
                    <i class="bi bi-file-earmark-text-fill me-2"></i>
                    Заявка #<span id="modalRequestNumber"></span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editForm">
                <div class="modal-body">
                    <input type="hidden" id="requestId" name="requestId" />

                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="modalRequestDate" readonly>
                                <label>Дата подачи</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating">
                                <select class="form-select" id="status" name="status" required>
                                    <option value="ожидает">Ожидает</option>
                                    <option value="одобрено">Одобрено</option>
                                    <option value="отклонено">Отклонено</option>
                                </select>
                                <label>Статус</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="modalStudent" readonly>
                                <label>Ученик</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-floating">
                                <input type="text" class="form-control" id="modalParent" readonly>
                                <label>Родитель</label>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="form-floating">
                                <textarea class="form-control" id="comment" name="comment" style="height: 100px"></textarea>
                                <label>Комментарий</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-save-fill me-2"></i>Сохранить
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            const apiBaseUrl = 'https://localhost:7123';
            let currentRequests = []; // Хранилище загруженных заявок

            // Форматирование даты
            function formatDate(dateString) {
                const date = new Date(dateString);
                const day = date.getDate().toString().padStart(2, '0');
                const month = (date.getMonth() + 1).toString().padStart(2, '0');
                const year = date.getFullYear();
                return `${day}.${month}.${year}`;
            }

            // Определение цвета статуса
            function getStatusColor(status) {
                switch (status.toLowerCase()) {
                    case 'одобрено': return 'success';
                    case 'отклонено': return 'danger';
                    default: return 'warning';
                }
            }

            // Отрисовка карточек заявок
            function renderRequests(requests) {
                $('#requestsCards').empty();

                requests.forEach((request, index) => {
                    const card = `
                        <div class="card request-card position-relative" data-requestid="${request.idRequest}">
                            <div class="card-body d-flex justify-content-between align-items-center gap-2">
                                <div class="d-flex align-items-center gap-3 flex-grow-1">
                                    <!-- Номер заявки -->
                                    <small class="text-muted text-nowrap">
                                        #${index + 1}
                                    </small>

                                    <!-- Дата -->
                                    <small class="text-muted text-nowrap">
                                        <i class="bi bi-calendar-event me-1"></i>${formatDate(request.requestDate)}
                                    </small>

                                    <!-- Разделитель -->
                                    <div class="vr"></div>

                                    <!-- Ученик -->
                                    <div class="d-flex align-items-center gap-1 text-nowrap">
                                        <i class="bi bi-person text-muted"></i>
                                        <strong>${request.studentFullName}</strong>
                                    </div>
                                </div>

                                <!-- Статус (справа) -->
                                <span class="badge bg-${getStatusColor(request.status)} ms-2 text-nowrap">
                                    ${request.status}
                                </span>
                            </div>
                        </div>`;
                    $('#requestsCards').append(card);
                });
            }

            // Загрузка заявок для группы
            async function loadGroupRequests(groupId) {
                try {
                    const response = await fetch(`${apiBaseUrl}/api/EnrollmentRequests/groups/${groupId}/requests`);

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Ошибка: ${response.status} - ${errorText}`);
                    }

                    currentRequests = await response.json();
                    renderRequests(currentRequests);

                    $('#requestsContainer').show();
                    $('#noRequests').toggle(currentRequests.length === 0);

                } catch (error) {
                    console.error('Ошибка загрузки:', error);
                    alert(error.message);
                }
            }

            // Открытие модального окна с данными заявки
            function openRequestModal(requestId) {
                const request = currentRequests.find(r => r.idRequest === requestId);
                if (!request) return;

                $('#modalRequestNumber').text(currentRequests.findIndex(r => r.idRequest === requestId) + 1);
                $('#modalRequestDate').val(formatDate(request.requestDate));
                $('#modalStudent').val(request.studentFullName);
                $('#modalParent').val(request.parentFullName);
                $('#status').val(request.status);
                $('#comment').val(request.comment || '');
                $('#requestId').val(requestId);

                $('#requestModal').modal('show');
            }

            // Обработчик клика по группе
            $('.group-item').click(async function () {
                const $this = $(this);
                const groupId = $this.data('groupid');
                const groupName = $this.find('h5').text();
                const maxStudents = $this.data('maxstudents');
                const currentStudents = $this.data('current');

                $('#groupTitle').text(groupName);
                $('#capacityWarning').toggle(currentStudents >= maxStudents);

                await loadGroupRequests(groupId);
            });

            // Обработчик клика по карточке заявки
            $(document).on('click', '.request-card', function() {
                const requestId = $(this).data('requestid');
                openRequestModal(requestId);
            });

            // Обработчик сохранения изменений
            $('#editForm').submit(async function (e) {
                e.preventDefault();

                const data = {
                    status: $('#status').val(),
                    comment: $('#comment').val()
                };

                try {
                    const requestId = $('#requestId').val();
                    const response = await fetch(
                        `${apiBaseUrl}/api/EnrollmentRequests/requests/${requestId}`,
                        {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(data)
                        }
                    );

                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(errorText);
                    }

                    // Обновляем локальные данные
                    const updatedIndex = currentRequests.findIndex(r => r.idRequest == requestId);
                    if (updatedIndex > -1) {
                        currentRequests[updatedIndex] = {
                            ...currentRequests[updatedIndex],
                            status: data.status,
                            comment: data.comment
                        };
                    }

                    renderRequests(currentRequests);
                    $('#requestModal').modal('hide');
                    alert('Изменения успешно сохранены!');

                } catch (error) {
                    console.error('Ошибка сохранения:', error);
                    alert(`Ошибка: ${error.message}`);
                }
            });

            // Инициализация tooltips
            $('[data-toggle="tooltip"]').tooltip();
        });
    </script>
}