@using ElectronicDiaryApi.ModelsDto.UsersView
<!-- Views/Students/Details.cshtml -->
@model StudentDto
@{
    ViewData["Title"] = "Профиль студента";
}

<div class="container mt-4">
    <h1 class="mb-4">@Model.FullName</h1>

    <!-- Основная информация -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">Основная информация</h5>
        </div>
        <div class="card-body">
            <dl class="row">
                <dt class="col-sm-3">Логин:</dt>
                <dd class="col-sm-9">@Model.Login</dd>

                <dt class="col-sm-3">Телефон:</dt>
                <dd class="col-sm-9">@Model.Phone</dd>

                <dt class="col-sm-3">Место обучения:</dt>
                <dd class="col-sm-9">@Model.EducationName</dd>
            </dl>
        </div>
    </div>

    <!-- Предметы -->
    <div class="card mb-4">
        <div class="card-header bg-success text-white">
            <h5 class="mb-0">Предметы</h5>
        </div>
        <div class="card-body">
            @if (Model.Subjects.Any())
            {
                <div class="row">
                    @foreach (var subject in Model.Subjects)
                    {
                        <div class="col-md-6 mb-4">
                            <div class="card clickable-card" onclick="window.location.href='@Url.Action("Details", "Subjects", new { id = subject.IdSubject })'" style="cursor: pointer;">
                                <!-- Заголовок с названием предмета -->
                                <div class="card-header bg-light">
                                    <h6 class="mb-0">@subject.Name</h6>
                                </div>

                                <!-- Тело карточки с группами -->
                                <div class="card-body">
                                    @if (subject.Groups.Any())
                                    {
                                        foreach (var group in subject.Groups)
                                        {
                                            <div class="mb-3 border-bottom pb-2">
                                                <dl class="row mb-0">
                                                    <dt class="col-sm-5">Группа:</dt>
                                                    <dd class="col-sm-7">@group.Name</dd>
                                                </dl>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning mb-0">
                                            Нет групп по этому предмету
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning mb-0">
                    Нет привязанных предметов
                </div>
            }
        </div>
    </div>

    <!-- Родители -->
    <div class="card mb-4">
        <div class="card-header bg-warning text-white">
            <h5 class="mb-0">Родители</h5>
        </div>
        <div class="card-body">
            @if (Model.Parents.Any())
            {
                <div class="row">
                    @foreach (var parent in Model.Parents)
                    {
                        <div class="col-md-6 mb-3">
                            <div class="card clickable-card" onclick="window.location.href='@Url.Action("Details", "Parents", new { id = parent.IdParent })'" style="cursor: pointer;">
                                <div class="card-body">
                                    <h6 class="card-title">@parent.FullName</h6>
                                    <dl class="row">
                                        <dt class="col-sm-5">Телефон:</dt>
                                        <dd class="col-sm-7">@parent.Phone</dd>
                                        <dt class="col-sm-5">Кем приходится:</dt>
                                        <dd class="col-sm-7">@parent.ParentRole</dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    Нет привязанных родителей
                </div>
            }
        </div>
    </div>

    <!-- Заявки -->
    @if (Model.EnrollmentRequests.Any())
    {
        <div class="card mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Заявки на зачисление</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>№</th>
                                <th>Дата подачи</th>
                                <th>Статус</th>
                                <th>Группа</th>
                                <th>Предмет</th>
                                <th>Родитель</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var req in Model.EnrollmentRequests)
                            {
                                <tr>
                                    <td>@req.IdRequest</td>
                                    <td>@req.RequestDate?.ToString("dd.MM.yyyy")"</td>
                                    <td>
                                        <span class="badge @(req.Status == "Approved" ? "bg-success" :
                                             req.Status == "Pending" ? "bg-warning" :
                                             "bg-danger")">
                                            @req.Status
                                        </span>
                                    </td>
                                    <td>@req.GroupName</td>
                                    <td>@req.SubjectName</td>
                                    <td>@req.ParentFullName</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <div class="mb-4">
        <a href="javascript:void(0)" class="btn btn-outline-secondary" id="goBackButton">
            ← Назад
        </a>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Проверяем актуальность сохранённого состояния (не старше 30 минут)
            const savedState = sessionStorage.getItem('journalState');
            if (savedState) {
                const state = JSON.parse(savedState);
                const stateAge = Date.now() - (state.timestamp || 0);
                if (stateAge > 30 * 60 * 1000) {
                    sessionStorage.removeItem('journalState');
                }
            }

            // Обработчик кнопки "Назад"
            document.getElementById('goBackButton').addEventListener('click', function() {
                const returnUrl = sessionStorage.getItem('returnUrl') || document.referrer;
                const savedState = sessionStorage.getItem('journalState') ||
                                  localStorage.getItem('journalBackupState');

                if (savedState && returnUrl) {
                    const state = JSON.parse(savedState);

                    // Формируем URL с параметрами
                    const url = new URL(returnUrl, window.location.origin);
                    url.searchParams.set('subjectId', state.subjectId);
                    url.searchParams.set('groupId', state.groupId);

                    if (state.journalId) {
                        url.searchParams.set('journalId', state.journalId);
                    }

                    // Добавляем параметр для предотвращения кэширования
                    url.searchParams.set('_t', Date.now());

                    window.location.href = url.toString();
                } else {
                    window.history.back();
                }
            });
        });
    </script>
}

<style>
    .clickable-card:hover {
        background-color: #f8f9fa;
    }

    /* Стили для карточек (как были) */
    .clickable-card {
        transition: all 0.2s ease;
        cursor: pointer;
    }

        .clickable-card:hover {
            background-color: #f8f9fa;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

    /* Новые стили для таблицы журнала (если она есть на странице) */
    .journal-table .clickable-student {
        cursor: pointer;
        transition: all 0.15s ease;
        position: relative;
        padding-right: 25px !important; /* Для стрелки */
    }

        .journal-table .clickable-student:hover {
            background-color: #f0f7ff;
            color: #0d6efd;
        }

        /* Стрелка при наведении */
        .journal-table .clickable-student::after {
            content: "→";
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            opacity: 0;
            transition: all 0.2s ease;
            color: #6c757d;
        }

        .journal-table .clickable-student:hover::after {
            opacity: 1;
            transform: translateY(-50%) translateX(3px);
        }

    /* Адаптивность */
    @@media (max-width: 768px) {
        .clickable-card:hover {
            transform: none; /* Отключаем поднятие на мобильных */
        }

        .journal-table .clickable-student::after {
            display: none; /* Скрываем стрелку на малых экранах */
        }
    }
</style>