@using ElectronicDiaryWeb.Models.Auth
@model RegisterChildWithParentsModel

@{
    ViewData["Title"] = "Регистрация ребенка с родителями";
}

<div class="container mt-4">
    <!-- Контейнер для уведомлений -->
    <div id="alertContainer" style="position: fixed; top: 20px; right: 20px; z-index: 1000;"></div>

    <!-- Глобальный лоадер -->
    <div id="loader" class="text-center" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 1000;">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>

    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Регистрация ребенка с родителями</h3>
        </div>
        <div class="card-body">
            <form id="childForm" class="needs-validation" novalidate>
                <div class="row">
                    <div class="col-md-6">
                        <h4 class="text-primary mb-3">Данные ребенка</h4>
                        <div class="form-group mb-3">
                            <label asp-for="Surname" class="form-label">Фамилия*</label>
                            <input asp-for="Surname" class="form-control" required />
                            <div class="invalid-feedback">Пожалуйста, укажите фамилию</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Name" class="form-label">Имя*</label>
                            <input asp-for="Name" class="form-control" required />
                            <div class="invalid-feedback">Пожалуйста, укажите имя</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Patronymic" class="form-label">Отчество</label>
                            <input asp-for="Patronymic" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="BirthDate" class="form-label">Дата рождения*</label>
                            <input asp-for="BirthDate" type="date" class="form-control" required />
                            <div class="invalid-feedback">Пожалуйста, укажите дату рождения</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Phone" class="form-label">Телефон</label>
                            <input asp-for="Phone" class="form-control" />
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Login" class="form-label">Логин*</label>
                            <input asp-for="Login" class="form-control" required />
                            <div class="invalid-feedback">Пожалуйста, укажите логин</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="Password" class="form-label">Пароль*</label>
                            <input asp-for="Password" type="password" class="form-control" required minlength="6" />
                            <div class="invalid-feedback">Пароль должен содержать минимум 6 символов</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="ConfirmPassword" class="form-label">Подтверждение пароля*</label>
                            <input asp-for="ConfirmPassword" type="password" class="form-control" required />
                            <div class="invalid-feedback">Пароли не совпадают</div>
                        </div>

                        <div class="form-group mb-3">
                            <label asp-for="EducationName" class="form-label">Учебное заведение*</label>
                            <input asp-for="EducationName" class="form-control" required />
                            <div class="invalid-feedback">Пожалуйста, укажите учебное заведение</div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <h4 class="text-primary mb-3">Родители</h4>

                        <div class="form-group mb-3">
                            <label>Поиск родителей</label>
                            <div class="input-group mb-3">
                                <input type="text" id="parentSearch" class="form-control" placeholder="Введите ФИО или телефон" />
                                <button class="btn btn-outline-primary" type="button" id="searchBtn">
                                    <i class="fas fa-search"></i> Найти
                                </button>
                            </div>
                        </div>

                        <div id="parentResults" class="mb-3" style="max-height: 300px; overflow-y: auto;">
                            <div class="text-muted">Введите данные для поиска родителей</div>
                        </div>

                        <div class="mb-3">
                            <h5 class="text-primary">Выбранные родители:</h5>
                            <div id="selectedParents" class="d-flex flex-wrap gap-2"></div>
                            <input type="hidden" id="parentIds" name="ParentIds" />
                        </div>

                        <!-- Карточка для выбора роли родителя -->
                        <div id="parentRoleCard" class="card mb-3" style="display: none;">
                            <div class="card-header bg-light">
                                <h5 class="mb-0">Выберите роль родителя</h5>
                            </div>
                            <div class="card-body">
                                <select id="parentRoleSelect" class="form-select mb-3">
                                    <option value="папа">Папа</option>
                                    <option value="мама">Мама</option>
                                    <option value="бабушка">Бабушка</option>
                                    <option value="дедушка">Дедушка</option>
                                    <option value="опекун">Опекун</option>
                                    <option value="другое">Другое</option>
                                </select>
                                <button type="button" id="confirmParentBtn" class="btn btn-primary w-100">Подтвердить выбор</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="d-flex justify-content-between mt-4">
                    <a asp-action="Index" asp-controller="Home" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Назад
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-user-plus"></i> Зарегистрировать
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .parent-list-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: all 0.2s;
    }

        .parent-list-item:hover {
            background-color: #f8f9fa;
        }

        .parent-list-item.selected {
            background-color: #e9f7fe;
        }

    .parent-badge {
        font-size: 0.9rem;
        padding: 0.5em 0.75em;
        position: relative;
    }

        .parent-badge .badge-role {
            font-size: 0.7em;
            margin-left: 0.5em;
            background-color: #6c757d;
        }

    #parentResults {
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }

    #selectedParents {
        min-height: 60px;
        background-color: #f8f9fa;
        border-radius: 0.25rem;
        padding: 0.5rem;
    }
</style>

<script>
        (function() {
        // Конфигурация API
        const apiBaseUrl = window.apiBaseUrl;
        const selectedParents = new Map();
        let currentSelectedParent = null;

        // Функция для отображения результатов поиска родителей
        function renderParentResults(parents) {
            const container = document.getElementById('parentResults');
            if (!container) return;

            container.innerHTML = '';

            if (!parents || parents.length === 0) {
                container.innerHTML = '<div class="text-muted p-3">Родители не найдены</div>';
                return;
            }

            parents.forEach(parent => {
                const parentElement = document.createElement('div');
                parentElement.className = 'parent-list-item d-flex justify-content-between align-items-center';
                parentElement.dataset.id = parent.id;
                parentElement.innerHTML = `
                    <div>
                        <strong>${parent.fullName}</strong>
                        <div class="text-muted small">${parent.phone}</div>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-primary select-parent-btn">
                        Выбрать
                    </button>
                `;
                container.appendChild(parentElement);
            });
        }

        // Функция для отображения выбранных родителей
        function renderSelectedParents() {
            const container = document.getElementById('selectedParents');
            if (!container) return;

            container.innerHTML = '';

            if (selectedParents.size === 0) {
                container.innerHTML = '<div class="text-muted">Родители не выбраны</div>';
                const parentIdsInput = document.getElementById('parentIds');
                if (parentIdsInput) parentIdsInput.value = '';
                return;
            }

            selectedParents.forEach((parent, id) => {
                const badge = document.createElement('span');
                badge.className = 'badge bg-primary parent-badge d-flex align-items-center me-2 mb-2';
                badge.innerHTML = `
                    ${parent.name}
                    <span class="badge badge-role">${parent.role}</span>
                    <button type="button" class="btn-close btn-close-white ms-2 remove-parent"></button>
                `;
                badge.dataset.id = id;
                container.appendChild(badge);
            });

            const parentIdsInput = document.getElementById('parentIds');
            if (parentIdsInput) parentIdsInput.value = Array.from(selectedParents.keys()).join(',');
        }

        // Функция поиска родителей
        async function searchParents() {
            const searchInput = document.getElementById('parentSearch');
            if (!searchInput) return;

            const query = searchInput.value.trim();
            if (query.length < 2) {
                showAlert('Введите минимум 2 символа для поиска', 'warning');
                return;
            }

            try {
                showLoading(true);

                const response = await fetch(`${apiBaseUrl}/api/users/search-parents?query=${encodeURIComponent(query)}`, {
                    headers: {
                        'Authorization': `Bearer ${getCookie('_secure_at')}`,
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(errorText || 'Ошибка поиска');
                }

                const data = await response.json();
                renderParentResults(data);
            } catch (error) {
                console.error('Ошибка поиска родителей:', error);
                showAlert(error.message || 'Ошибка при поиске родителей', 'danger');
            } finally {
                showLoading(false);
            }
        }

        // Функция для показа уведомлений
        function showAlert(message, type) {
            const alertContainer = document.getElementById('alertContainer');
            if (!alertContainer) return;

            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            alertContainer.appendChild(alertDiv);
            setTimeout(() => alertDiv.remove(), 5000);
        }

        // Функция для показа индикатора загрузки
        function showLoading(show) {
            const loader = document.getElementById('loader');
            if (loader) {
                loader.style.display = show ? 'block' : 'none';
            }
        }

        // Функция для получения cookie
        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            // Обработчик поиска
            const searchBtn = document.getElementById('searchBtn');
            if (searchBtn) {
                searchBtn.addEventListener('click', searchParents);
            }

            // Обработчик выбора родителя из списка
            const parentResults = document.getElementById('parentResults');
            if (parentResults) {
                parentResults.addEventListener('click', function(e) {
                    const selectBtn = e.target.closest('.select-parent-btn');
                    if (selectBtn) {
                        const parentItem = selectBtn.closest('.parent-list-item');
                        const parentId = parentItem.dataset.id;
                        const parentName = parentItem.querySelector('strong').textContent;

                        currentSelectedParent = { id: parentId, name: parentName };
                        const roleCard = document.getElementById('parentRoleCard');
                        if (roleCard) {
                            roleCard.style.display = 'block';
                            roleCard.scrollIntoView({ behavior: 'smooth' });
                        }
                    }
                });
            }

            // Обработчик подтверждения выбора родителя
            const confirmBtn = document.getElementById('confirmParentBtn');
            if (confirmBtn) {
                confirmBtn.addEventListener('click', function(e) {
                    e.preventDefault(); // Предотвращаем действие по умолчанию
                    e.stopPropagation(); // Останавливаем всплытие события

                    if (currentSelectedParent) {
                        const roleSelect = document.getElementById('parentRoleSelect');
                        const role = roleSelect ? roleSelect.value : 'родитель';

                        selectedParents.set(currentSelectedParent.id, {
                            name: currentSelectedParent.name,
                            role: role
                        });
                        renderSelectedParents();

                        const roleCard = document.getElementById('parentRoleCard');
                        if (roleCard) roleCard.style.display = 'none';

                        currentSelectedParent = null;
                    }
                });
            }

            // Обработчик удаления родителя
            const selectedParentsContainer = document.getElementById('selectedParents');
            if (selectedParentsContainer) {
                selectedParentsContainer.addEventListener('click', function(e) {
                    const removeBtn = e.target.closest('.remove-parent');
                    if (removeBtn) {
                        const parentBadge = removeBtn.closest('.parent-badge');
                        const parentId = parentBadge.dataset.id;
                        selectedParents.delete(parentId);
                        renderSelectedParents();
                    }
                });
            }

            // Обработчик формы
            const childForm = document.getElementById('childForm');
            if (childForm) {
                childForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    e.stopPropagation();

                    // Валидация формы
                    if (!this.checkValidity()) {
                        this.classList.add('was-validated');
                        return;
                    }

                    // Проверка совпадения паролей
                    const password = this.querySelector('input[name="Password"]').value;
                    const confirmPassword = this.querySelector('input[name="ConfirmPassword"]').value;

                    if (password !== confirmPassword) {
                        showAlert('Пароли не совпадают', 'danger');
                        return;
                    }

                    // Проверка выбранных родителей
                    if (selectedParents.size === 0) {
                        showAlert('Выберите хотя бы одного родителя', 'warning');
                        return;
                    }

                    // Сбор данных формы
                    const formData = {
                        Login: this.querySelector('input[name="Login"]').value,
                        Password: password,
                        Name: this.querySelector('input[name="Name"]').value,
                        Surname: this.querySelector('input[name="Surname"]').value,
                        Patronymic: this.querySelector('input[name="Patronymic"]').value,
                        BirthDate: this.querySelector('input[name="BirthDate"]').value,
                        Phone: this.querySelector('input[name="Phone"]').value,
                        EducationName: this.querySelector('input[name="EducationName"]').value,
                        ParentIds: Array.from(selectedParents.keys()),
                        ParentRole: Array.from(selectedParents.values()).map(p => p.role).join(',')
                    };

                    try {
                        showLoading(true);

                        // Отправка запроса
                        const response = await fetch(`${apiBaseUrl}/api/users/register-child`, {
                            method: 'POST',
                            headers: {
                                'Authorization': `Bearer ${getCookie('_secure_at')}`,
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                            },
                            credentials: 'include',
                            body: JSON.stringify(formData)
                        });

                        if (!response.ok) {
                            const errorText = await response.text();
                            throw new Error(errorText || `Ошибка сервера: ${response.status}`);
                        }

                        const result = await response.json();
                        showAlert('Ребенок успешно зарегистрирован', 'success');
                        setTimeout(() => {
                            window.location.href = '/Home/Index';
                        }, 2000);
                    } catch (error) {
                        console.error('Ошибка:', error);
                        showAlert(error.message || 'Произошла ошибка при регистрации', 'danger');
                    } finally {
                        showLoading(false);
                    }
                });
            }
        });
    })();
</script>