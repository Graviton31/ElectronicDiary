@using ElectronicDiaryWeb.Models.Auth
<!-- RegisterChildWithParents.cshtml -->
@model RegisterChildWithParentsModel

<h2>Регистрация ребенка с привязкой к родителям</h2>

<form id="childForm">
    <div class="row">
        <div class="col-md-6">
            <h4>Данные ребенка</h4>
            <div class="form-group">
                <label asp-for="Login"></label>
                <input asp-for="Login" class="form-control" required />
                <span asp-validation-for="Login" class="text-danger"></span>
            </div>
            <!-- Остальные поля ребенка -->
        </div>

        <div class="col-md-6">
            <h4>Родители</h4>
            <div class="form-group">
                <label>Поиск родителей</label>
                <div class="input-group">
                    <input type="text" id="parentSearch" class="form-control" placeholder="ФИО родителя" />
                    <button class="btn btn-outline-secondary" type="button" id="searchButton">Найти</button>
                </div>
                <div id="parentResults" class="mt-2"></div>
            </div>

            <div class="mt-3">
                <h5>Выбранные родители:</h5>
                <div id="selectedParents" class="d-flex flex-wrap gap-2"></div>
            </div>
        </div>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Зарегистрировать</button>
</form>

@section Scripts {
    <script>
        const selectedParents = new Map();

        $('#searchButton').click(searchParents);
        $('#parentSearch').on('keypress', function(e) {
            if (e.which === 13) searchParents();
        });

        function searchParents() {
            const query = $('#parentSearch').val();
            if (query.length < 2) return;

            fetch(`/api/users/search-parents?query=${encodeURIComponent(query)}`, {
                headers: {
                    'Authorization': `Bearer ${getCookie('accessToken')}`
                }
            })
            .then(response => response.json())
            .then(renderParentResults)
            .catch(console.error);
        }

        function renderParentResults(parents) {
            const container = $('#parentResults');
            container.empty();

            if (parents.length === 0) {
                container.append('<div class="text-muted">Ничего не найдено</div>');
                return;
            }

            parents.forEach(parent => {
                if (selectedParents.has(parent.Id)) return;

                const element = $(`
                    <div class="card mb-2 parent-result" data-id="${parent.Id}">
                        <div class="card-body">
                            <h5 class="card-title">${parent.FullName}</h5>
                            <p class="card-text">${parent.Phone}</p>
                            <button type="button" class="btn btn-sm btn-primary select-parent">Выбрать</button>
                        </div>
                    </div>
                `);

                container.append(element);
            });
        }

        $(document).on('click', '.select-parent', function() {
            const card = $(this).closest('.parent-result');
            const parentId = card.data('id');
            const parentName = card.find('.card-title').text();

            if (!selectedParents.has(parentId)) {
                selectedParents.set(parentId, parentName);
                renderSelectedParents();
            }

            card.remove();
            $('#parentSearch').val('');
            $('#parentResults').empty();
        });

        $(document).on('click', '.remove-parent', function() {
            const parentId = $(this).closest('.badge').data('id');
            selectedParents.delete(parentId);
            renderSelectedParents();
        });

        function renderSelectedParents() {
            const container = $('#selectedParents');
            container.empty();

            selectedParents.forEach((name, id) => {
                container.append(`
                    <span class="badge bg-primary d-flex align-items-center" data-id="${id}">
                        ${name}
                        <button type="button" class="btn-close btn-close-white ms-2 remove-parent"></button>
                    </span>
                `);
            });
        }

        $('#childForm').submit(async function(e) {
            e.preventDefault();

            const formData = getFormData($(this));
            formData.ParentIds = Array.from(selectedParents.keys());

            try {
                const response = await fetch('/api/users/register-child-with-parents', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${getCookie('accessToken')}`
                    },
                    body: JSON.stringify(formData)
                });

                if (response.ok) {
                    window.location.href = '/Home/Index';
                } else {
                    alert('Ошибка при регистрации: ' + await response.text());
                }
            } catch (error) {
                console.error(error);
                alert('Произошла ошибка');
            }
        });

        function getFormData(form) {
            const data = {};
            form.find('input, select').not('#parentSearch').each(function() {
                data[$(this).attr('name')] = $(this).val();
            });
            return data;
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }
    </script>
}